---
AWSTemplateFormatVersion : "2010-09-09"
Parameters:
  # This time I have made more parameters, I found some time to do it and I think it makes for a better structure.
  Subnet1:
    Type: String
    Description: local subnet
    Default: subnet-a293d3f8
  Subnet2:
    Type: String
    Description: local subnet
    Default: subnet-1efee856
  Subnet3:
    Type: String
    Description: local subnet
    Default: subnet-07404661
  VPCID:
    Description: VPC ID
    Type: String
    Default: vpc-10c51069
  ImageId:
    Type: String
    Description: 'Linux 2 AMI for Ireland eu-west1 Region'
    Default: 'ami-0c1bc246476a5572b'
  InstanceType:
    Type: String
    Description: Free tier
    Default: t2.micro
  Key1:
    Description: SSH Keypair to login to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: MyDemoKey1
  jcILU2ec2efsmountpoint:
    Description: Directory in EC2 Amazon Linux instance for efs to mount
    Type: String
    Default: "var/www/html"
Resources:
  #These first resources are security groups to allow the virtual machines and the end user access to the system.
  jcILU2WPInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow instance access to EFS and RDS
      GroupName: jcILU2WPInstanceSG
      Tags:
        - Key: Name
          Value: jcILU2WPInstanceSG
  #This instance is to allow the virtual machines access to the file system.
  jcILU2EFSmountSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow NFS to EFS
      GroupName: jcILU2EFSmountSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupName: !Ref jcILU2WPInstanceSG
          FromPort: 2049
          ToPort: 2049
      Tags:
        - Key: Name
          Value: jcILU2EFSmountSG
  #This security group is for the virtual machines to gain access to the database (where the data will be stored).
  jcILU2RDSSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow RDS access
      GroupName: jcILU2RDSSG
      SecurityGroupIngress:
        IpProtocol: tcp
        SourceSecurityGroupName: !Ref jcILU2WPInstanceSG
        FromPort: 3306
        ToPort: 3306
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: jcILU2RDSSG
  #These two security groups are for the virtual machines to reach internet and to be reachable for me as a programmer.
  #For security reasons I would, with more time for developing, constrict them for only the virtual machine's security group.
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh to client host
      GroupName: SSHSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SSHSecurityGroup
  HTTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      GroupName: HTTPSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: HTTPSecurityGroup
  #This security group is for the end user (the home page designer first, and later the target audience, to reach the site).
  jcILU2ALBhttpsg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group to allow http to Application Load Balancer
      GroupName: jcILU2ALBhttpsg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALBhttpsg
  #These next four resources are for the file system. One general and one for each of the subnets
  jcILU2EFS:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy:
        Status: DISABLED
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: jcILU2EFS
  jcILU2EFSMT1:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref jcILU2EFS
      SecurityGroups: 
        - !GetAtt jcILU2EFSmountSG.GroupId
      SubnetId: !Ref Subnet1
  jcILU2EFSMT2:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref jcILU2EFS
      SecurityGroups: 
        - !GetAtt jcILU2EFSmountSG.GroupId
      SubnetId: !Ref Subnet2
  jcILU2EFSMT3:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref jcILU2EFS
      SecurityGroups: 
        - !GetAtt jcILU2EFSmountSG.GroupId
      SubnetId: !Ref Subnet3
  #This next resource is the database
  jcILU2RDSmySQL:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties: 
      AllocatedStorage: 20
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: jcILU2dbinstance-1
      DBName: jcILU2ApacheDBnamn
      Engine: mysql
      EngineVersion: 8.0.28
      MasterUsername: admin
      MasterUserPassword: adminadmin
      Port: 3306
      PubliclyAccessible: no
      VPCSecurityGroups: 
        - !GetAtt jcILU2RDSSG.GroupId
  #This next resource is the virtual machine that will install the WordPress software on the file system.
  #Before doing that, the file system must be in place. Also, the database to be used, which will be referenced to in the WordPress settings.
  jcILU2EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn:
      - jcILU2EFSMT1
      - jcILU2EFSMT2
      - jcILU2EFSMT3
      - jcILU2EFS
      - jcILU2RDSmySQL
    Properties:
      SecurityGroupIds:
      - !GetAtt SSHSecurityGroup.GroupId
      - !GetAtt HTTPSecurityGroup.GroupId
      - !GetAtt jcILU2WPInstanceSG.GroupId
      KeyName: !Ref Key1
      #The Image below is for the virtual machine to get Linux installed on it. Amazon Linux 2.
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      InstanceInitiatedShutdownBehavior: terminate
      Tags:
      - Key: Name
        Value: JCILU2EC2Instance
      #THe user data below is extensive. Comments cannot be made in it so I will try to explain it here.
      #First the virtual machine, freshly installed, will be updated. Then the file system utility is installed.
      #A folder is created and the file system is mounted there, so anything put in the folder will be safe in the file system.
      #User and group rights are modified in this folder so the Apache server has full access to it.
      #This installation is following the LAMP-system, Linux, Apache, MySQL and PHP. Linux is installed with the Image. Apache is installed below.
      #MySQL is installed in the RDS part, it is the database. PHP is installed in the mariadb package below.
      #Then, WordPress is installed. The sample configuration file is copied and the contents added to the actual configuration file.
      #Afterwards, some data is put in the wp-config.php file (configuration file) of wordpress. The name of the database earlier set up in RDS.
      #User name, password, the address to the database.
      #A code for making the WordPress installation safer is copied from the WordPress site that generates these (called SALT) and deposited in the configuration file as well.
      #For the Apache server configuration (httpd.conf), a setting is changed so permanent links can be used. This is needed for WordPress to work properly.
      #Afterwards, phpMyAdmin is installed. A sample configuration file included is copied and the contents added to the actual configuration file (config.inc.php).
      #In the PHP Administration program configuration file, the address of the database made earlier is included.
      #After that, this virtual machine is shut down. It will not be used for running the website.
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y amazon-efs-utils
          mkdir -p ${jcILU2ec2efsmountpoint}
          echo "${jcILU2EFS}:/ ${jcILU2ec2efsmountpoint} efs _netdev,tls 0 0" | tee -a /etc/fstab
          mount -a
          amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          usermod -a -G apache ec2-user
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www && find /var/www -type d -exec sudo chmod 2775 {} \;
          find /var/www -type f -exec sudo chmod 0664 {} \;
          wget -O /tmp/latest.tar.gz https://wordpress.org/latest.tar.gz
          tar -xzf /tmp/latest.tar.gz -C /tmp
          rm /tmp/latest.tar.gz
          cp /tmp/wordpress/wp-config-sample.php /tmp/wordpress/wp-config.php
          sed -i 's/database_name_here/jcILU2ApacheDBnamn/' /tmp/wordpress/wp-config.php
          sed -i 's/username_here/admin/' /tmp/wordpress/wp-config.php
          sed -i 's/password_here/adminadmin/' /tmp/wordpress/wp-config.php
          sed -i 's/localhost/${jcILU2RDSmySQL.Endpoint.Address}:3306/' /tmp/wordpress/wp-config.php
          SALT=$(curl -L https://api.wordpress.org/secret-key/1.1/salt/)
          STRING='put your unique phrase here'
          printf '%s\n' "g/$STRING/d" a "$SALT" . w | ed -s /tmp/wordpress/wp-config.php
          cp -r /tmp/wordpress/* /var/www/html/
          sed -i '/<Directory "\/var\/www\/html">/,/<\/Directory>/ s/AllowOverride None/AllowOverride All/' /etc/httpd/conf/httpd.conf
          yum install php-gd
          yum install php-mbstring php-xml -y
          systemctl enable httpd
          systemctl restart httpd
          systemctl restart php-fpm
          wget -O /tmp/phpMyAdmin-latest-all-languages.tar.gz https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.tar.gz
          mkdir /var/www/html/phpMyAdmin && tar -xvzf /tmp/phpMyAdmin-latest-all-languages.tar.gz -C /var/www/html/phpMyAdmin --strip-components 1
          rm /tmp/phpMyAdmin-latest-all-languages.tar.gz
          cp /var/www/html/phpMyAdmin/config.sample.inc.php /var/www/html/phpMyAdmin/config.inc.php
          sed -i 's/localhost/${jcILU2RDSmySQL.Endpoint.Address}:3306/' /var/www/html/phpMyAdmin/config.inc.php
          shutdown -h +0
  #This is the load balancer, from here, access to the website will be given.
  jcILU2ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: jcILU2ALB
      Subnets:
      - !Ref Subnet1
      - !Ref Subnet2
      - !Ref Subnet3
      Tags:
        - Key: Name
          Value: jcILU2ALB
      SecurityGroups:
        - !GetAtt jcILU2ALBhttpsg.GroupId
  #This is a template for the virtual machines that will actually run for the website.
  #After the first is done installing, this will be used with an Auto Scale Group and Load Balancer.
  #In my first assignment for this class, I was able to use the LaunchTemplateData SecurityGroup property.
  #This time, to get the Auto Scale group to work, it had to be the LaunchTemplateData SecurityGroupId.
  #I can't say that I'm certain why one worked and the other didn't.
  jcILU2LT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-jcILU2-launch-template-for-auto-scaling'
      LaunchTemplateData:
        KeyName: !Ref Key1
        ImageId: !Ref ImageId
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
        - !GetAtt jcILU2ALBhttpsg.GroupId
        - !GetAtt jcILU2WPInstanceSG.GroupId
        #This is a shorter UserData than for the initial virtual machine. It installs the connection to the File system.
        #The folder is made and the rights changed for group and user so the Apache server can reach it.
        #The folder that is used here connects to the one installed by the first machine.
        #An Apache server is installed for hosting. The same setting is made as for the first virtual machine, so WordPress works properly.
        #As WordPress already is configured, the database is linked from the start.
        #After the links are made to the WordPress data, the Apache server is restarted.
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y amazon-efs-utils
            mkdir -p ${jcILU2ec2efsmountpoint}
            echo "${jcILU2EFS}:/ ${jcILU2ec2efsmountpoint} efs _netdev,tls 0 0" | tee -a /etc/fstab
            mount -a
            amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            usermod -a -G apache ec2-user
            chown -R ec2-user:apache /var/www
            chmod 2775 /var/www && find /var/www -type d -exec sudo chmod 2775 {} \;
            find /var/www -type f -exec sudo chmod 0664 {} \;
            sed -i '/<Directory "\/var\/www\/html">/,/<\/Directory>/ s/AllowOverride None/AllowOverride All/' /etc/httpd/conf/httpd.conf
            yum install php-gd
            yum install php-mbstring php-xml -y
            systemctl enable httpd
            systemctl restart httpd
            systemctl restart php-fpm
  #This is the Auto Scale Group whidh will use the Launch Template above to create virtual machines to run the website.
  jcILU2ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: jcILU2EC2Instance
    Properties:
      AutoScalingGroupName: jcILU2ASG
      LaunchTemplate:
        LaunchTemplateId: !Ref jcILU2LT
        Version: !GetAtt jcILU2LT.LatestVersionNumber
      MaxSize: "3"
      MinSize: "3"
      DesiredCapacity: "3"
      AvailabilityZones:
      - eu-west-1a
      - eu-west-1b
      - eu-west-1c
      TargetGroupARNs:
        - !Ref jcILU2TG
      VPCZoneIdentifier:   
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
  jcILU2TG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-jcILU2TG'
      Protocol: HTTP
      Port: 80
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: jcILU2TG
  #This part of the load balancer will provide the actual address for the website.
  jcL:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref jcILU2TG
      LoadBalancerArn: !Ref jcILU2ALB
      Port: 80
      Protocol: HTTP
#I realize that more could be programmed here, so that the WordPress site did not have to be configured by itself.
#I decided not to because I felt that the assignments time constraints hindered me and the function was not better.
#I admit it would be more elegant to construct a solution where all the data is put in by the user when starting the stack.